name: Build

on:
  push:
    tags:
      - '*'
  pull_request:
    branches: ["main"]

jobs:
  prepare-inputs:
    name: Prepare Inputs
    runs-on: ubuntu-latest
    outputs:
      mod_name: ${{ steps.populate_value.outputs.mod_name }}
    steps:
      - uses: actions/checkout@v4
      - name: Download Dasel
        run: curl -s https://api.github.com/repos/tomwright/dasel/releases/latest | grep browser_download_url | grep linux_amd64 | cut -d '"' -f 4 | wget -qi - && mv dasel_linux_amd64 dasel && chmod +x dasel && mv ./dasel /usr/local/bin/dasel && dasel --version

      - name: Populate Inputs
        id: populate_value
        run: |
          echo "mod_name=$(dasel -f Plugin.csproj -r xml .Project.PropertyGroup.AssemblyName)" >> "$GITHUB_OUTPUT"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: prepare-inputs
    outputs:
      sem_ver: ${{ env.GitVersion_SemVer }}
      short_sha: ${{ env.GitVersion_ShortSha }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: "5.x"
      - uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 6.0.x

      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.7
        with:
          additionalArguments: '/updateprojectfiles /overrideconfig "mode=Mainline"'

      - name: Build (Release)
        run: dotnet build . --configuration Release -p:Version=${{ env.GitVersion_SemVer }}

      - name: Upload Build Artifacts
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist

  release:
    name: Release
    permissions:
      contents: write
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs:
      - build
      - prepare-inputs
    steps:
      - uses: actions/checkout@v4
      - name: Validate Tag
        run: |
          git fetch origin main
          MAIN_COMMIT=$(git rev-parse origin/main)
          TAG_COMMIT=$(git rev-parse $GITHUB_REF)
          if [ "$MAIN_COMMIT" != "$TAG_COMMIT" ]; then
            echo "The tag does not point to the latest commit on the 'main' branch."
            exit 1
          fi
          echo "The tag is valid and points to the latest commit on the 'main' branch."

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
          path: build

      - name: Zip Files
        run: zip -r -j ${{ needs.prepare-inputs.outputs.mod_name }}.zip build/ icon.png README.md LICENSE

      - name: Generate Pre Release
        uses: softprops/action-gh-release@v2
        with:
          body: Automatic pre-release of ${{ needs.build.outputs.sem_ver }} for ${{ needs.build.outputs.short_sha }}
          name: v${{ needs.build.outputs.sem_ver }}
          files: ${{ needs.prepare-inputs.outputs.mod_name }}.zip
          fail_on_unmatched_files: true
          prerelease: true
